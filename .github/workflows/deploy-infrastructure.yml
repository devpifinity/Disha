name: Deploy Infrastructure

on:
  push:
    branches: [develop, main]
    paths:
      - 'infrastructure/cdk/**'
      - '.github/workflows/deploy-infrastructure.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod
      action:
        description: 'CDK action to perform'
        required: true
        default: 'deploy'
        type: choice
        options:
          - deploy
          - diff
          - destroy
      branch:
        description: 'Branch to deploy from'
        required: false
        default: 'main'
        type: string

concurrency:
  group: deploy-infrastructure-${{ github.ref_name }}-${{ inputs.environment || (github.ref_name == 'main' && 'prod' || 'dev') }}
  cancel-in-progress: true

jobs:
  determine-environment:
    name: Determine Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      should-deploy: ${{ steps.env.outputs.should-deploy }}
    steps:
      - name: Determine environment and deployment
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ inputs.environment }}" >> $GITHUB_OUTPUT
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref_name }}" == "main" ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref_name }}" == "develop" ]]; then
            echo "environment=dev" >> $GITHUB_OUTPUT
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
            echo "should-deploy=false" >> $GITHUB_OUTPUT
          fi

  deploy-infrastructure:
    name: Deploy Infrastructure to ${{ needs.determine-environment.outputs.environment }}
    runs-on: ubuntu-latest
    needs: determine-environment
    if: needs.determine-environment.outputs.should-deploy == 'true'
    environment: ${{ needs.determine-environment.outputs.environment == 'prod' && 'production' || 'development' }}
    
    permissions:
      id-token: write
      contents: read
      actions: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch || github.ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::418295724706:role/GitHub-OIDC
          role-session-name: GitHubActions-CDK-${{ needs.determine-environment.outputs.environment }}
          aws-region: us-east-1

      - name: Install CDK dependencies
        working-directory: infrastructure/cdk
        run: npm install

      - name: Build CDK
        working-directory: infrastructure/cdk
        run: npm run build

      - name: CDK Bootstrap (if needed)
        working-directory: infrastructure/cdk
        run: |
          # Check if bootstrap is needed
          if ! aws cloudformation describe-stacks --stack-name CDKToolkit 2>/dev/null; then
            echo "Bootstrapping CDK..."
            npx cdk bootstrap -c environment=${{ needs.determine-environment.outputs.environment }}
          else
            echo "CDK already bootstrapped"
          fi

      - name: CDK Diff
        working-directory: infrastructure/cdk
        run: |
          echo "## Infrastructure Changes for ${{ needs.determine-environment.outputs.environment }} environment" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          npx cdk diff -c environment=${{ needs.determine-environment.outputs.environment }} >> $GITHUB_STEP_SUMMARY || true
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: CDK Deploy
        if: inputs.action != 'diff' && inputs.action != 'destroy'
        working-directory: infrastructure/cdk
        run: |
          npx cdk deploy --require-approval never -c environment=${{ needs.determine-environment.outputs.environment }}

      - name: CDK Destroy
        if: inputs.action == 'destroy'
        working-directory: infrastructure/cdk
        run: |
          npx cdk destroy --force -c environment=${{ needs.determine-environment.outputs.environment }}

      - name: Extract Stack Outputs
        if: inputs.action != 'destroy'
        working-directory: infrastructure/cdk
        run: |
          # Extract stack outputs and set as environment variables
          STACK_NAME="disha-career-platform-${{ needs.determine-environment.outputs.environment }}"
          ENV="${{ needs.determine-environment.outputs.environment }}"
          
          # Get stack outputs in JSON format
          OUTPUTS=$(aws cloudformation describe-stacks \
            --stack-name $STACK_NAME \
            --query 'Stacks[0].Outputs' \
            --output json)
          
          # Extract individual values
          S3_BUCKET=$(echo $OUTPUTS | jq -r '.[] | select(.OutputKey=="S3BucketName") | .OutputValue')
          CLOUDFRONT_ID=$(echo $OUTPUTS | jq -r '.[] | select(.OutputKey=="CloudFrontDistributionId") | .OutputValue')
          WEBSITE_URL=$(echo $OUTPUTS | jq -r '.[] | select(.OutputKey=="WebsiteUrl") | .OutputValue')
          
          # Set environment variables for next step
          echo "S3_BUCKET_NAME=$S3_BUCKET" >> $GITHUB_ENV
          echo "CLOUDFRONT_DISTRIBUTION_ID=$CLOUDFRONT_ID" >> $GITHUB_ENV
          echo "WEBSITE_URL=$WEBSITE_URL" >> $GITHUB_ENV
          echo "ENVIRONMENT=$ENV" >> $GITHUB_ENV

      - name: Set GitHub Repository Variables
        if: inputs.action != 'destroy'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN || github.token }}
        run: |
          # Set environment-specific variable names
          ENV_SUFFIX=""
          if [ "$ENVIRONMENT" = "dev" ]; then
            ENV_SUFFIX="_DEV"
          elif [ "$ENVIRONMENT" = "prod" ]; then
            ENV_SUFFIX="_PROD"
          fi
          
          # Try to set repository variables using GitHub CLI
          echo "🔧 Attempting to set repository variables..."
          
          if gh variable set "S3_BUCKET_NAME${ENV_SUFFIX}" --body "$S3_BUCKET_NAME" 2>/dev/null; then
            echo "✅ S3_BUCKET_NAME${ENV_SUFFIX} set successfully"
          else
            echo "⚠️  Failed to set S3_BUCKET_NAME${ENV_SUFFIX} - insufficient permissions"
            echo "📋 Manual setup required: S3_BUCKET_NAME${ENV_SUFFIX} = $S3_BUCKET_NAME"
          fi
          
          if gh variable set "CLOUDFRONT_DISTRIBUTION_ID${ENV_SUFFIX}" --body "$CLOUDFRONT_DISTRIBUTION_ID" 2>/dev/null; then
            echo "✅ CLOUDFRONT_DISTRIBUTION_ID${ENV_SUFFIX} set successfully"
          else
            echo "⚠️  Failed to set CLOUDFRONT_DISTRIBUTION_ID${ENV_SUFFIX} - insufficient permissions"
            echo "📋 Manual setup required: CLOUDFRONT_DISTRIBUTION_ID${ENV_SUFFIX} = $CLOUDFRONT_DISTRIBUTION_ID"
          fi
          
          if gh variable set "WEBSITE_URL${ENV_SUFFIX}" --body "$WEBSITE_URL" 2>/dev/null; then
            echo "✅ WEBSITE_URL${ENV_SUFFIX} set successfully"
          else
            echo "⚠️  Failed to set WEBSITE_URL${ENV_SUFFIX} - insufficient permissions"
            echo "📋 Manual setup required: WEBSITE_URL${ENV_SUFFIX} = $WEBSITE_URL"
          fi

      - name: Output Stack Information
        if: inputs.action != 'destroy'
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ needs.determine-environment.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Stack Name**: disha-career-platform-${{ needs.determine-environment.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Region**: us-east-1" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployed by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Repository Variables Required" >> $GITHUB_STEP_SUMMARY
          echo "The following repository variables are needed for deployment workflows:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Variable Name | Value | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|---------------|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| \`S3_BUCKET_NAME_${{ needs.determine-environment.outputs.environment == 'prod' && 'PROD' || 'DEV' }}\` | \`$S3_BUCKET_NAME\` | 🔧 Check logs above |" >> $GITHUB_STEP_SUMMARY
          echo "| \`CLOUDFRONT_DISTRIBUTION_ID_${{ needs.determine-environment.outputs.environment == 'prod' && 'PROD' || 'DEV' }}\` | \`$CLOUDFRONT_DISTRIBUTION_ID\` | 🔧 Check logs above |" >> $GITHUB_STEP_SUMMARY
          echo "| \`WEBSITE_URL_${{ needs.determine-environment.outputs.environment == 'prod' && 'PROD' || 'DEV' }}\` | \`$WEBSITE_URL\` | 🔧 Check logs above |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Manual Setup Instructions (if automatic setup failed)" >> $GITHUB_STEP_SUMMARY
          echo "1. Go to **Settings** → **Secrets and variables** → **Actions**" >> $GITHUB_STEP_SUMMARY
          echo "2. Click on the **Variables** tab" >> $GITHUB_STEP_SUMMARY
          echo "3. Add the variables listed above with their corresponding values" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "> 💡 **Note**: Repository variables are required for the deployment workflows to function correctly." >> $GITHUB_STEP_SUMMARY